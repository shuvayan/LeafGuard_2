# -*- coding: utf-8 -*-
"""Dataset_Description_Initial_Dataset_View.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wnjSj3E6cvLxQMAUEJkmYnxIFQq7eG3_
"""

# Import necessary libraries
import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from collections import Counter
from wordcloud import WordCloud

# Load the Plant Village dataset from TensorFlow Datasets
dataset, info = tfds.load("plant_village", split="train", with_info=True, as_supervised=True)

# Display basic information about the dataset
print("Dataset Information:")
print(info)

# Extract class names and the total number of classes
class_names = info.features["label"].names
num_classes = len(class_names)
print("\nNumber of Classes:", num_classes)
print("Class Names:", class_names)

# Initialize lists for EDA
label_list = []
image_shapes = []

# Extract labels and image shapes for EDA
for image, label in tfds.as_numpy(dataset):
    label_list.append(label)
    image_shapes.append(image.shape)

# Descriptive Data Summary
label_counts = Counter(label_list)
total_images = sum(label_counts.values())
print("\nTotal Number of Images:", total_images)
print("Label Distribution:", label_counts)

# Convert the label counts to a DataFrame for easier visualization
label_df = pd.DataFrame.from_dict(label_counts, orient='index', columns=['Count'])
label_df.index = [class_names[i] for i in label_df.index]
label_df.sort_values(by='Count', ascending=False, inplace=True)

# Display the label distribution
print("\nLabel Distribution DataFrame:")
print(label_df)

# Infographic 1: Class Distribution Bar Plot
plt.figure(figsize=(15, 6))
sns.barplot(x=label_df.index, y=label_df['Count'], palette="viridis")
plt.xticks(rotation=90)
plt.title("Class Distribution of Plant Village Dataset")
plt.xlabel("Classes")
plt.ylabel("Number of Images")
plt.show()

# Infographic 2: Word Cloud of Class Names
wordcloud = WordCloud(width=800, height=400, background_color="white").generate(" ".join(class_names))
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Word Cloud of Plant Village Classes")
plt.show()

# Analyze image shapes
unique_shapes = Counter(image_shapes)
print("\nUnique Image Shapes:", unique_shapes)

# Visualize 20 random sample images with their labels
def plot_sample_images(dataset, num_images):
    plt.figure(figsize=(15, 10))
    for i, (image, label) in enumerate(dataset.take(num_images)):
        plt.subplot(4, 5, i + 1)
        plt.imshow(image)
        plt.axis("off")
        plt.title(class_names[label.numpy()], fontsize=8)
    plt.show()

print("\nSample Images from the Dataset:")
plot_sample_images(dataset, 20)

# Infographic 3: Pixel Intensity Distribution
def plot_pixel_intensity(dataset, num_samples=100):
    pixel_values = []
    for image, _ in dataset.take(num_samples):
        pixel_values.extend(image.numpy().flatten())

    plt.figure(figsize=(10, 5))
    sns.histplot(pixel_values, bins=50, color='blue', kde=True)
    plt.title("Pixel Intensity Distribution (Sample of 100 Images)")
    plt.xlabel("Pixel Intensity")
    plt.ylabel("Frequency")
    plt.show()

print("\nPixel Intensity Distribution Analysis:")
plot_pixel_intensity(dataset)

# Import necessary libraries
import matplotlib.pyplot as plt
import seaborn as sns

# Convert the label counts to a DataFrame for easier visualization
label_df = pd.DataFrame.from_dict(label_counts, orient='index', columns=['Count'])
label_df.index = [class_names[i] for i in label_df.index]
label_df.sort_values(by='Count', ascending=False, inplace=True)

# Infographic: Class Distribution Bar Plot
plt.figure(figsize=(15, 6))
sns.barplot(x=label_df.index, y=label_df['Count'], palette="viridis")
plt.xticks(rotation=90)
plt.title("Number of Images per Class in Plant Village Dataset")
plt.xlabel("Classes")
plt.ylabel("Number of Images")
plt.show()

# Filter image shapes to only include width and height (ignore channels)
image_shapes = [(shape[0], shape[1]) for shape in image_shapes if len(shape) == 3]

# Image shape statistics
image_widths, image_heights = zip(*[(shape[0], shape[1]) for shape in image_shapes])
print("\nAverage Image Width:", np.mean(image_widths))
print("Average Image Height:", np.mean(image_heights))

# Infographic 4: Heatmap of Image Shape Frequencies
shape_df = pd.DataFrame(image_shapes, columns=["Width", "Height"])
shape_counts = shape_df.groupby(["Width", "Height"]).size().unstack(fill_value=0)
plt.figure(figsize=(10, 8))
sns.heatmap(shape_counts, cmap="coolwarm", cbar=True)
plt.title("Heatmap of Image Shape Frequencies")
plt.xlabel("Height")
plt.ylabel("Width")
plt.show()

# EDA Summary
print("\nEDA Summary:")
print("- The dataset has", num_classes, "classes with a total of", total_images, "images.")
print("- The class distribution is shown above, indicating any potential class imbalance.")
print("- The pixel intensity distribution helps understand the overall brightness and contrast levels in the images.")
print("- The unique image shapes are:", unique_shapes)